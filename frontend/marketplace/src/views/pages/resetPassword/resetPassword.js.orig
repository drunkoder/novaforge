import React, { useState } from 'react';
import axios from 'axios';
import { useParams, useHistory } from 'react-router-dom';
import { CForm, CFormInput, CButton, CContainer, CRow, CCol, CCard, CCardBody, CToast, CToastBody, CToastHeader, CToaster } from '@coreui/react';

//const BASE_URL = 'http://localhost:3001'; // replace with your API base URL

const ResetPassword = () => {
  const { token } = useParams();
  const history = useHistory();
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [message, setMessage] = useState('');
  const [toast, setToast] = useState({ visible: false, message: '', color: '' });

  const showToast = (message, color) => {
    setToast({ visible: true, message, color });
    setTimeout(() => {
      setToast({ visible: false, message: '', color: '' });
    }, 3000);
  };

  const onSubmit = async (e) => {
    e.preventDefault();

    if (password !== confirmPassword) {
      setMessage('Passwords do not match');
      showToast('Passwords do not match', 'danger');
      return;
    }

    try {
      const res = await axios.post(`${BASE_URL}/reset-password/${token}`, { password, confirmPassword });
      setMessage(res.data.message);
      showToast(res.data.message, 'success');
      if (res.data.redirectUrl) {
<<<<<<< Updated upstream
        console.log(history.push(`${BASE_URL}/login`));
=======
        history.push(res.data.redirectUrl);
>>>>>>> Stashed changes
      }
    } catch (error) {
      setMessage(error.response ? error.response.data.message : error.message);
      showToast(error.response ? error.response.data.message : error.message, 'danger');
    }
  };

  return (
    <CContainer>
      <CToaster position="top-end" className="position-fixed top-0 end-0 p-3">
        {toast.visible && (
          <CToast autohide={false} visible={true} color={toast.color} className="text-white align-items-center">
            <CToastHeader closeButton>
              <strong className="me-auto">Notification</strong>
            </CToastHeader>
            <CToastBody>{toast.message}</CToastBody>
          </CToast>
        )}
      </CToaster>

      <CRow className="justify-content-center">
        <CCol md={6}>
          <CCard>
            <CCardBody>
              <h1>Reset Password</h1>
              {message && <p>{message}</p>}
              <CForm onSubmit={onSubmit}>
                <CFormInput
                  type="password"
                  name="password"
                  placeholder="New Password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  required
                />
                <CFormInput
                  type="password"
                  name="confirmPassword"
                  placeholder="Confirm Password"
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  required
                />
                <CButton type="submit" color="primary" className="mt-3">
                  Reset Password
                </CButton>
              </CForm>
            </CCardBody>
          </CCard>
        </CCol>
      </CRow>
    </CContainer>
  );
};

export default ResetPassword;
